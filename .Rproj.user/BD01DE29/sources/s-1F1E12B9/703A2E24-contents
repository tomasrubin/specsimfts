############################################################################################################################################
# test stationarity of FARFIMA
FARFIMA_covlagh_operator <- function(FARFIMA_pars, lag, n_grid, n_grid_freq=500){
  
  # evaluate operators on grid
  grid <- seq( 0, 1, length.out = n_grid ) # grid of [0,1] interval
  grid_matrix <- kronecker(grid,matrix(1,1,n_grid))
  
  # frequency intergration grid 
  grid_freq <- seq( 0, pi, length.out = n_grid_freq )

  
  # save model order
  ar_order <- length(operators_ar)
  ma_order <- length(operators_ma)
  
  # if not specified, create the function for sigma
  if(is.null(FARFIMA_pars[["sigma"]])){
    FARFIMA_pars$sigma <- kernel_from_eig( FARFIMA_pars$sigma_eigenvalues, FARFIMA_pars$sigma_eigenfunctions )
  }
  
  # express sigma
  sigma_eval <- FARFIMA_pars$sigma(grid_matrix,t(grid_matrix))  / n_grid
  
  # express AR operators
  operators_ar_eval <- FARFIMA_pars$operators_ar
  if (ar_order > 0){
    for (j in 1:ar_order){
      operators_ar_eval[[j]] <- FARFIMA_pars$operators_ar[[j]](grid_matrix,t(grid_matrix)) / n_grid
    }
  }
  
  # express MA operators
  operators_ma_eval <- operators_ma
  if (ma_order > 0){
    for (j in 1:ma_order){
      operators_ma_eval[[j]] <- FARFIMA_pars$operators_ma[[j]](grid_matrix,t(grid_matrix))  / n_grid
    }
  }
  
  covlagh <- matrix(0, ncol=n_grid, nrow=n_grid)
  for (k in 1:n_grid_freq){
    
    omega <- grid_freq[k]
    
    # evaluate spectral density
    # express AR operators
    ar_part <- diag(n_grid)
    if (ar_order > 0){
      for (j in 1:ar_order){
        ar_part <- ar_part + operators_ar_eval[[j]] * exp(-1i*j*omega)
      }
    }
    ar_part_inv <- solve(ar_part)
    
    # express MA operators
    ma_part <- diag(n_grid)
    if (ma_order > 0){
      for (j in 1:ma_order){
        ma_part <- ma_part + operators_ma_eval[[j]] * exp(-1i*j*omega)
      }
    }
    
    # spec_density
    spec_density <- 1/(2*pi) * ( 2*sin(omega/2) )^(-2*FARFIMA_pars$fractional_d) * ar_part_inv %*% ma_part %*% sigma_eval %*% Conj(t(ma_part)) %*% Conj(t(ar_part_inv)) * n_grid
    
    # contributions to cov lags
    covlagh <- covlagh + pi / n_grid_freq * (spec_density * exp(1i*lag*omega) + t(spec_density) * exp(-1i*lag*omega) )
  }
  
  return(Re(covlagh))
}