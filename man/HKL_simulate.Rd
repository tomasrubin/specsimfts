% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HKL_simulate.R
\name{HKL_simulate}
\alias{HKL_simulate}
\title{Simulate FTS given its harmonic KL decomposition}
\usage{
HKL_simulate(
  harmonic_eigenvalues,
  harmonic_eigenfunctions,
  t_max,
  n_grid,
  n_pc,
  seed_number = NaN,
  include_freq_zero = F
)
}
\arguments{
\item{harmonic_eigenvalues}{function of two variables, \code{omega} and \code{n}, that assigns the \code{n}-th harmonic eigenvalue at frequency \code{omega}}

\item{harmonic_eigenfunctions}{function of three variables, \code{omega}, \code{n} and \code{x}, that assigns the \code{n}-th harmonic eigenfunction at point \code{x} in [0,1] at frequency \code{omega}}

\item{t_max}{Time horizon to be sumilated. Must be an even number.}

\item{n_grid}{Number of grid points (spatial resolution) of the discretisation of [0,1] where the FTS is to be simulated}

\item{freq}{frequency grid to estimate on as in \code{\link{spectral.density}}}
}
\value{
functional time series sample, matrix of size (n_grid,t_max)
}
\description{
Simulate functional time series sample given its harmonic Karhunen-Loeve decomposition.
}
\examples{
## Define the eigenvalues and eigenfunction of the process to simulate
harmonic_eigenvalues <- function( omega, n ){ 1/( (1-0.99*cos(omega)) * (n*pi)^2 ) }
harmonic_eigenfunctions <- function(omega, n, x){ sqrt(2)*sin( n*(pi*x-omega)  ) }


## simulation setting
t_max <- 1000
n_grid <- 101
n_pc <- 100

# simulate trajectory
start_time <- Sys.time()
fts_x <- f_CKL_simulate(harmonic_eigenvalues, harmonic_eigenfunctions, t_max, n_grid, n_pc)
end_time <- Sys.time()
timing <- difftime(end_time,start_time)
timing

# display the first curve
plot( fts_x[,1], type='l' )

}
\references{
Rubin, Panaretos.
*Simulation of stationary functional time series with given spectral density*.
arXiv, 2020
}
\seealso{
\code{\link{spec_density_simulate}}
}
