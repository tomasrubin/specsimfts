% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CKL_simulate.R
\name{CKL_simulate}
\alias{CKL_simulate}
\title{Simulate FTS given its harmonic KL decomposition}
\usage{
CKL_simulate(
  harmonic_eigenvalues,
  harmonic_eigenfunctions,
  t_max,
  n_grid,
  n_pc,
  seed_number = NULL,
  include_freq_zero = F
)
}
\arguments{
\item{harmonic_eigenvalues}{function of two variables, \code{omega} and \code{n}, that assigns the \code{n}-th harmonic eigenvalue at frequency \code{omega}. Must be well defined for frequencies (0,pi]. The interval [pi,2pi) is not used and is calculated by mirroring of (0,pi]..}

\item{harmonic_eigenfunctions}{function of three variables, \code{omega}, \code{n} and \code{x}, that assigns the \code{n}-th harmonic eigenfunction at point \code{x} in [0,1] at frequency \code{omega}. Must be well defined for frequencies (0,pi]. The interval [pi,2pi) is not used and is calculated by mirroring of (0,pi].}

\item{t_max}{Time horizon to be simulated. Must be an even number, otherwise it is increased by one.}

\item{n_grid}{Number of grid points (spatial resolution) of the discretisation of [0,1] where the FTS is to be simulated.}

\item{n_pc}{The number of harmonic eigenfunctions to be used for the simulation at each frequency.}

\item{seed_number}{The random seed inicialization for the simulation. The value "NULL" means no inicialization}

\item{include_freq_zero}{If set \code{TRUE}, the zero frequency is included for simulation in the spectral domain. Set \code{FALSE} for processes with singularity at frequency zero, such as the long-range dependent FARFIMA(p,d,q) process.}
}
\value{
functional time series sample, matrix of size (\code{n_grid},\code{t_max})
}
\description{
Simulate functional time series sample given its harmonic Karhunen-Loeve decomposition.
}
\examples{
# Define the eigenvalues and eigenfunction of the process to simulate
harmonic_eigenvalues <- function( omega, n ){ 1/( (1-0.9 *cos(omega)) * (n*pi)^2 ) }
harmonic_eigenfunctions <- function(omega, n, x){ sqrt(2)*sin( n*(pi*x-omega)  ) }

# simulation setting
t_max <- 1000
n_grid <- 101
n_pc <- 100

# simulate trajectory
fts_x <- CKL_simulate(harmonic_eigenvalues, harmonic_eigenfunctions, t_max, n_grid, n_pc)

# display the first curve
plot( fts_x[,1], type='l' )

}
\references{
Rubin, Panaretos. \emph{Simulation of stationary functional time series with given spectral density}. arXiv, 2020
}
\seealso{
\code{\link{CKL_covlagh_operator}}, \code{\link{spec_density_simulate}}
}
