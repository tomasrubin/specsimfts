source('C:/Users/tomas/Dropbox/Simulation FTS/simstudy/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simulation FTS/simstudy/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simulation FTS/simstudy/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simulation FTS/simstudy/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simulation FTS/simstudy/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simulation FTS/simstudy/figure_CKL_dependence_on_N.R', echo=TRUE)
legend( x="topcenter", legend=n_pc_all, col=cols, lty = 1, lwd=2, ncol=8 )
source('C:/Users/tomas/Dropbox/Simulation FTS/simstudy/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simulation FTS - v2/demo_simulate_FARIMA_my.R', echo=TRUE)
par(mfrow=c(1,2))
persp( m2[seq(1,n_grid,by=5),seq(1,n_grid,by=5)], ticktype="detailed", xlab="", ylab="", zlab="", main="S(x,y)" )
persp( m1[seq(1,n_grid,by=5),seq(1,n_grid,by=5)], ticktype="detailed", xlab="", ylab="", zlab="", main="A_1(x,y)" )
persp( m1[seq(1,n_grid,by=5),seq(1,n_grid,by=5)], ticktype="detailed", xlab="", ylab="", zlab="", main="S(x,y)" )
persp( m2[seq(1,n_grid,by=5),seq(1,n_grid,by=5)], ticktype="detailed", xlab="", ylab="", zlab="", main="A_1(x,y)" )
persp( m2[seq(1,n_grid,by=5),seq(1,n_grid,by=5)], ticktype="detailed", xlab="", ylab="", zlab="", main="A" )
persp( m1[seq(1,n_grid,by=5),seq(1,n_grid,by=5)], ticktype="detailed", xlab="", ylab="", zlab="", main="S" )
setwd("C:/Users/tomas/OneDrive/Documents/GitHub/specsimfts")
library(devtools);
load_all(".");
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/figure_CKL_dependence_on_N.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/simstudy_custom_CKL_timing_t_max.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/simstudy_custom_CKL_timing_t_max.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/simstudy_custom_CKL_timing_n_grid.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/precalculate_lagh_cov_custom_CKL.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/precalculate_lagh_cov_ARMA_lowrank.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/simstudy_ARMA_lowrank.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/simstudy_ARMA_lowrank.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simstudy specsimfts/functions_simstudy.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
FARFIMA_test_stationarity(FARFIMA_pars, 101)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
# evaluate operators on grid
grid <- seq( 0, 1, length.out = n_grid ) # grid of [0,1] interval
grid_matrix <- kronecker(grid,matrix(1,1,n_grid))
# save model order
ar_order <- length(FARFIMA_pars$operators_ar)
if (ar_order == 0){# if no AR part, always stationary
return(TRUE)
} else {
# express AR operators
operators_ar_eval <- FARFIMA_pars$operators_ar
for (j in 1:ar_order){
operators_ar_eval[[j]] <- FARFIMA_pars$operators_ar[[j]](grid_matrix,t(grid_matrix)) / n_grid
}
# compose the AR operator in the state-space
composed_a <- matrix(0, nrow=ar_order*n_grid, ncol=ar_order*n_grid)
for (ii in 1:ar_order){
composed_a[ 1:n_grid , ((ii-1)*n_grid+1):(ii*n_grid)] <- operators_ar_eval[[ii]]
}
if (ar_order>1){
for (ii in 1:(ar_order-1)){
composed_a[ (ii*n_grid+1):((ii+1)*n_grid), ((ii-1)*n_grid+1):(ii*n_grid) ] <- diag(n_grid)
}
}
m <- composed_a %^% 1000 # perform matrix power
if (is.na(max(m))){ return(F) }
else {
return( norm( m, type="2" ) < 1 )
}
}
# express AR operators
operators_ar_eval <- FARFIMA_pars$operators_ar
for (j in 1:ar_order){
operators_ar_eval[[j]] <- FARFIMA_pars$operators_ar[[j]](grid_matrix,t(grid_matrix)) / n_grid
}
# compose the AR operator in the state-space
composed_a <- matrix(0, nrow=ar_order*n_grid, ncol=ar_order*n_grid)
for (ii in 1:ar_order){
composed_a[ 1:n_grid , ((ii-1)*n_grid+1):(ii*n_grid)] <- operators_ar_eval[[ii]]
}
if (ar_order>1){
for (ii in 1:(ar_order-1)){
composed_a[ (ii*n_grid+1):((ii+1)*n_grid), ((ii-1)*n_grid+1):(ii*n_grid) ] <- diag(n_grid)
}
}
m <- composed_a %^% 1000 # perform matrix power
if (is.na(max(m))){ return(F) }
setwd("C:/Users/tomas/OneDrive/Documents/GitHub/specsimfts")
library(devtools);
load_all(".");
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
is.numeric(m)
setwd("C:/Users/tomas/OneDrive/Documents/GitHub/specsimfts")
library(devtools);
load_all(".");
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
warnings()
plot(spec_fts_x[,1], type='l', main="fully spectral")
plot(hybrid_fts_x[,1], type='l', main="hybrid")
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_spec_vs_hybrid.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARMA_SVD.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARMA_SVD.R', echo=TRUE)
