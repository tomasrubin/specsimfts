sigma_l_sqrt <- 1/((n-0.5)*pi)
sigma_e <- sqrt(2) * sin( (n-0.5)*pi*grid )
inner_product_e_f <- mean( sigma_e * exp_f )
for (ii in (1:n_grid_freq)){
# function
omega <- (2*ii*pi)/n_grid_freq
phi <- sigma_e + ( exp(-1i*omega) *0.34 )/( 1- exp(-1i*omega)*0.34*exp_f_norm2 ) * inner_product_e_f * exp_f
covlagh <- covlagh + sigma_l_sqrt^2 * phi %*% t(phi) * exp(+1i*omega*lag) * (2*pi)/n_grid_freq
}
}
close(pb)
end_time  = Sys.time()
end_time - start_time
start_time = Sys.time()
covlagh <- covlagh + sigma_l_sqrt^2 * phi %*% t(phi) * exp(+1i*omega*lag) * (2*pi)/n_grid_freq
end_time  = Sys.time()
end_time - start_time
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
start_time = Sys.time()
covlagh <- covlagh + sigma_l_sqrt^2 * phi %*% t(phi) * exp(+1i*omega*lag) * (2*pi)/n_grid_freq
end_time  = Sys.time()
end_time - start_time
phi %*% t(phi)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
sigma_e %*% Conj(sigma_e)
sigma_e
t(sigma_e)
covlagh <- covlagh + sigma_l_sqrt^2 * exp_f %o% Conj(exp_f) * integral_3
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
sigma_e %o% Conj(t(sigma_e))
m=sigma_e %o% Conj(sigma_e)
m=sigma_e %o% sigma_e
size(m)
shape(m)
dim(m)
n_grid_freq = 10
n_grid <- 1001 # spatial resolution
grid <- seq( 0, 1, length.out = n_grid ) # grid of [0,1] interval
n_pc = 3
lag = 0
start_time = Sys.time()
# where shall I save the cov lag h kernel
covlagh = matrix(0, nrow=n_grid, ncol=n_grid)
# prepare quantities for calculation of basis functions
exp_f <- exp( -grid^2 / 2 )
exp_f_norm2 <- mean( exp_f^2 ) # square of L2 integral norm
# integrate the spectral density
pb <- txtProgressBar(style = 3)
for (n in (1:n_pc)){
setTxtProgressBar(pb, n/n_pc)
# prepare eigenvalue and eigenfunction of Sigma
sigma_l_sqrt <- 1/((n-0.5)*pi)
sigma_e <- sqrt(2) * sin( (n-0.5)*pi*grid )
inner_product_e_f <- mean( sigma_e * exp_f )
# save only the scalar integrals
integral_1 <- 0
integral_2 <- 0
integral_3 <- 0
for (ii in (1:n_grid_freq)){
# function
omega <- (2*ii*pi)/n_grid_freq
integral_1 <- integral_1 + ( exp(-1i*omega) *0.34 )/( 1- exp(-1i*omega)*0.34*exp_f_norm2 ) * (2*pi)/n_grid_freq
}
integral_1 <- integral_1 * inner_product_e_f * (2*pi)/n_grid_freq
integral_2 <- Conj(integral_1)
integral_3 <- integral_1 * integral_2
covlagh <-           sigma_l_sqrt^2 * sigma_e %o% Conj(sigma_e) * 2*pi
covlagh <- covlagh + sigma_l_sqrt^2 * exp_f %o% Conj(sigma_e) * integral_1
covlagh <- covlagh + sigma_l_sqrt^2 * sigma_e %o% Conj(exp_f) * integral_2
covlagh <- covlagh + sigma_l_sqrt^2 * exp_f %o% Conj(exp_f) * integral_3
}
close(pb)
end_time  = Sys.time()
end_time - start_time
#persp(Re(covlagh))
image(Re(covlagh))
## timing
start_time = Sys.time()
covlagh <- covlagh + sigma_l_sqrt^2 * phi %*% t(phi) * exp(+1i*omega*lag) * (2*pi)/n_grid_freq
end_time  = Sys.time()
end_time - start_time
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
persp(Re(covlagh))
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
image(Re(covlagh))
persp(Re(covlagh))
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
image(Re(covlagh))
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
covlagh <- covlagh + sigma_l_sqrt^2 * exp_f %o% (exp_f) * integral_4
lag = 0
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
integral_4 <- integral_4 + abs(( exp(-1i*omega) *0.34 )/( 1- exp(-1i*omega)*0.34*exp_f_norm2 ))^2 * exp(1i*omega*lag)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/precalculate_lagh_cov.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
repmat(1, 3)
kronecker(grid^2,matrix(1,1,n_grid))
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/naive_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/naive_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/naive_lagh_cov.R', echo=TRUE)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/naive_lagh_cov.R', echo=TRUE)
0:10
kronecker()
covlag0 = matrix(0, n_grid, n_grid)
sigma <- min( grid_matrix, t(grid_matrix) )
sigma <- min( grid_matrix, t(grid_matrix) )
sigma_scaled <- sigma / n_grid
image(sigma)
sigma <- pmin( grid_matrix, t(grid_matrix) )
sigma_scaled <- sigma / n_grid
image(sigma)
source('C:/C-epfl results/Code _ Simulation of FTS/R/simulate like Li et al/naive_lagh_cov.R', echo=TRUE)
persp(ar_op)
persp(covlag0)
persp(ar_op)
persp(sigma)
persp(sigma)
image(sigma)
sigma
args=c("a","bbb","cccccccc")
print(args)
fts_x
size(fts_x)
shape(fts_x)
dim(fts_x)
t_max=200
n_grid=101
sigma <- function(x,y) { 1/(2*pi) * pmin(x,y)}
# define filtration
fractional_d <- 0.2
theta <- function(omega,f){
( 2 * sin(omega/2) )^(-fractional_d) *
(f + (exp(-1i*omega)*0.34) /(1-exp(-1i*omega)*0.34*sqrt(pi)/2*erfi(1)) *
rank_one_tensor( function(x){exp((x^2)/2)}, function(x){exp((x^2)/2)}, f ))
}
fts_x <- f_filtration_simulate(sigma, theta, t_max, n_grid, seed_number=seed_number, sigma_svd = f_BM_SVD(n_grid))
source('C:/Users/tomas/Dropbox/Simulation FTS - v2/functions_simstudy.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simulation FTS - v2/functions_custom_filtration.R', echo=TRUE)
fts_x <- f_filtration_simulate(sigma, theta, t_max, n_grid, seed_number=seed_number, sigma_svd = f_BM_SVD(n_grid))
seed_number=1
fts_x <- f_filtration_simulate(sigma, theta, t_max, n_grid, seed_number=seed_number, sigma_svd = f_BM_SVD(n_grid))
library(pracma)
fts_x <- f_filtration_simulate(sigma, theta, t_max, n_grid, seed_number=seed_number, sigma_svd = f_BM_SVD(n_grid))
# AR part
operators_ar <- list(  function(x,y){ -0.34 * exp(+(x^2+y^2)/2) })
fts_x <- f_apply_AR_part(fts_x, operators_ar)
fts_x <- fts_x[,101:end]
fts_x <- fts_x[,101:]
nrow(fts_x)
fts_x <- fts_x[,101:ncol(fts_x)]
setwd("C:/Users/tomas/OneDrive/Documents/GitHub/specsimfts")
library(devtools);
load_all(".");
help(lm);
source('C:/Users/tomas/Dropbox/Simulation FTS/demos/demo_harmonicKL.R', echo=TRUE)
source('C:/Users/tomas/Dropbox/Simulation FTS/demos/demo_harmonicKL.R', echo=TRUE)
harmonic_eigenvalues <- function( omega, n ){ 1/( (1-0.99 *cos(omega)) * (n*pi)^2 ) }
harmonic_eigenfunctions <- function(omega, n, x){ sqrt(2)*sin( n*(pi*x-omega)  ) }
## simulation setting
t_max <- 1000
n_grid <- 101
n_pc <- 100
# simulate trajectory
start_time = Sys.time()
fts_x <- HKL_simulate(harmonic_eigenvalues, harmonic_eigenfunctions, t_max, n_grid, n_pc)
end_time  = Sys.time()
timing <- difftime(end_time,start_time, units="secs")  # saving the simulation time
timing
# display
par(mfrow=c(1,3))
plot( fts_x[,10], type='l' )
lag <- 5
me <- cov( t(fts_x[,(1+lag):t_max]), t(fts_x[,1:(t_max-lag)]))
persp(me, ticktype = "detailed")
# levelplot(me)
source('~/GitHub/specsimfts/R/HKL_simulate.R', echo=TRUE)
harmonic_eigenvalues <- function( omega, n ){ 1/( (1-0.99 *cos(omega)) * (n*pi)^2 ) }
harmonic_eigenfunctions <- function(omega, n, x){ sqrt(2)*sin( n*(pi*x-omega)  ) }
## simulation setting
t_max <- 1000
n_grid <- 101
n_pc <- 100
# simulate trajectory
start_time = Sys.time()
fts_x <- HKL_simulate(harmonic_eigenvalues, harmonic_eigenfunctions, t_max, n_grid, n_pc)
end_time  = Sys.time()
timing <- difftime(end_time,start_time, units="secs")  # saving the simulation time
timing
# display
par(mfrow=c(1,3))
plot( fts_x[,10], type='l' )
lag <- 5
me <- cov( t(fts_x[,(1+lag):t_max]), t(fts_x[,1:(t_max-lag)]))
persp(me, ticktype = "detailed")
# levelplot(me)
size(ffts_x)
size(fts_x)
shape(fts_x)
dim(fts_x)
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
getwd()
setwd("C:/Users/tomas/OneDrive/Documents/GitHub/specsimfts")
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
?HKL_simulate
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
?HKL_simulate
source('~/GitHub/specsimfts/demo/demo_HKL.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
load_all(".")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_plain_spec_density.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
FARFIMA_test_stationarity(farima_pars, 101)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
setwd("C:/Users/tomas/OneDrive/Documents/GitHub/specsimfts")
library(devtools);
load_all(".");
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/R/FARFIMA_test_stationarity.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
is.null(FARFIMA_pars[["sigma_eigenfunctions"]])
farima_pars=FARFIMA_pars
# put the parameters into one list
FARFIMA_pars <- list(fractional_d=fractional_d,operators_ar=operators_ar,operators_ma=operators_ma,
sigma_eigenvalues=sigma_eigenvalues, sigma_eigenfunctions=sigma_eigenfunctions)
is.null(FARFIMA_pars[["sigma_eigenfunctions"]])
is.null(FARFIMA_pars[["sigma"]])
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
traceback()
lag
n_grid
# evaluate operators on grid
grid <- seq( 0, 1, length.out = n_grid ) # grid of [0,1] interval
grid_matrix <- kronecker(grid,matrix(1,1,n_grid))
# frequency intergration grid
n_grid_freq <- 2000
grid_freq <- seq( 0, pi, length.out = n_grid_freq )
# save model order
ar_order <- length(operators_ar)
ma_order <- length(operators_ma)
# if not specified, create the function for sigma
if(!is.null(FARFIMA_pars[["sigma"]])){
FARFIMA_pars$sigma <- kernel_from_eig( FARFIMA_pars$sigma_eigenvalues, FARFIMA_pars$sigma_eigenfunctions )
}
# express sigma
sigma_eval <- FARFIMA_pars$sigma(grid_matrix,t(grid_matrix))  / n_grid
FARFIMA_pars$sigma
# if not specified, create the function for sigma
if(is.null(FARFIMA_pars[["sigma"]])){
FARFIMA_pars$sigma <- kernel_from_eig( FARFIMA_pars$sigma_eigenvalues, FARFIMA_pars$sigma_eigenfunctions )
}
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
# evaluate operators on grid
grid <- seq( 0, 1, length.out = n_grid ) # grid of [0,1] interval
grid_matrix <- kronecker(grid,matrix(1,1,n_grid))
# frequency intergration grid
n_grid_freq <- 2000
grid_freq <- seq( 0, pi, length.out = n_grid_freq )
# save model order
ar_order <- length(operators_ar)
ma_order <- length(operators_ma)
# if not specified, create the function for sigma
if(is.null(FARFIMA_pars[["sigma"]])){
FARFIMA_pars$sigma <- kernel_from_eig( FARFIMA_pars$sigma_eigenvalues, FARFIMA_pars$sigma_eigenfunctions )
}
# express sigma
sigma_eval <- FARFIMA_pars$sigma(grid_matrix,t(grid_matrix))  / n_grid
# express AR operators
operators_ar_eval <- FARFIMA_pars$operators_ar
if (ar_order > 0){
for (j in 1:ar_order){
operators_ar_eval[[j]] <- FARFIMA_pars$operators_ar[[j]](grid_matrix,t(grid_matrix)) / n_grid
}
}
# express MA operators
operators_ma_eval <- operators_ma
if (ma_order > 0){
for (j in 1:ma_order){
operators_ma_eval[[j]] <- FARFIMA_pars$operators_ma[[j]](grid_matrix,t(grid_matrix))  / n_grid
}
}
covlagh <- matrix(0, ncol=n_grid, nrow=n_grid)
k=1
omega <- grid_freq[k]
# evaluate spectral density
# express AR operators
ar_part <- diag(n_grid)
if (ar_order > 0){
for (j in 1:ar_order){
ar_part <- ar_part + operators_ar_eval[[j]] * exp(-1i*j*omega)
}
}
ar_part_inv <- solve(ar_part)
# express MA operators
ma_part <- diag(n_grid)
if (ma_order > 0){
for (j in 1:ma_order){
ma_part <- ma_part + operators_ma_eval[[j]] * exp(-1i*j*omega)
}
}
# spec_density
spec_density <- 1/(2*pi) * ( 2*sin(omega/2) )^(-2*FARFIMA_pars$fractional_d) * ar_part_inv %*% ma_part %*% sigma_eval %*% Conj(t(ma_part)) %*% Conj(t(ar_part_inv)) * n_grid
# contributions to cov lags
covlagh <- covlagh + pi / n_grid_freq * (spec_density * exp(1i*lag*omega) + t(spec_density) * exp(-1i*lag*omega) )
covlagh <- matrix(0, ncol=n_grid, nrow=n_grid)
for (k in 1:n_grid_freq){
omega <- grid_freq[k]
# evaluate spectral density
# express AR operators
ar_part <- diag(n_grid)
if (ar_order > 0){
for (j in 1:ar_order){
ar_part <- ar_part + operators_ar_eval[[j]] * exp(-1i*j*omega)
}
}
ar_part_inv <- solve(ar_part)
# express MA operators
ma_part <- diag(n_grid)
if (ma_order > 0){
for (j in 1:ma_order){
ma_part <- ma_part + operators_ma_eval[[j]] * exp(-1i*j*omega)
}
}
# spec_density
spec_density <- 1/(2*pi) * ( 2*sin(omega/2) )^(-2*FARFIMA_pars$fractional_d) * ar_part_inv %*% ma_part %*% sigma_eval %*% Conj(t(ma_part)) %*% Conj(t(ar_part_inv)) * n_grid
# contributions to cov lags
covlagh <- covlagh + pi / n_grid_freq * (spec_density * exp(1i*lag*omega) + t(spec_density) * exp(-1i*lag*omega) )
}
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
print("Nuclear norm relative error")
print( sum(svd(r, nu=0, nv=0)$d) / sum(diag(covlag0)))
print("Nuclear norm relative error")
source('~/GitHub/specsimfts/demo/demo_FARFIMA_lowrank_sigma.R', echo=TRUE)
print(paste("Nuclear norm relative error", sum(svd(r, nu=0, nv=0)$d) / sum(diag(covlag0))))
source('~/GitHub/specsimfts/demo/demo_FARFIMA_brownian_motion_sigma.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_brownian_motion_sigma.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_brownian_motion_sigma.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_brownian_motion_sigma.R', echo=TRUE)
source('~/GitHub/specsimfts/demo/demo_FARFIMA_brownian_motion_sigma.R', echo=TRUE)
###############################################################################################
## set up the FTS dynamics
# fractional integration
fractional_d <- 0 # in the open interval (-0.5, 0.5), positive number means long-range dependence
# innovation covariance operator
sigma <- function(x,y) { pmin(x,y)}
# define filtration
fractional_d <- 0.2
theta <- function(omega,f){
( 2 * sin(omega/2) )^(-fractional_d) *
(f + (exp(-1i*omega)*0.34) /(1-exp(-1i*omega)*0.34*sqrt(pi)/2*erfi(1)) *
rank_one_tensor( function(x){exp((x^2)/2)}, function(x){exp((x^2)/2)}, f ))
}
## simulation setting
t_max <- 1000
n_grid <- 101
# set up random seed
seed <- NULL # no rng seed is inicialized
#seed <- 123
##################################################################################################################
## simulate
## simulate in the spectral domain
start_time <- Sys.time()
fts_x <- f_filtration_simulate(sigma, theta, t_max, n_grid, seed_number=seed)
end_time <- Sys.time()
print(end_time - start_time)
plot(fts_x[,1], type='l')
## simulate in the spectral domain
start_time <- Sys.time()
fts_x <- filtration_simulate(sigma, theta, t_max, n_grid, seed_number=seed)
end_time <- Sys.time()
print(end_time - start_time)
# plot one trajectory
par(mfrow=c(1,3))
plot(fts_x[,1], type='l')
source('~/GitHub/specsimfts/demo/demo_FARFIMA_paper_filtration.R', echo=TRUE)
# innovation covariance operator
sigma <- function(x,y) { pmin(x,y)}
# define filtration
fractional_d <- 0.2
theta <- function(omega,f){
( 2 * sin(omega/2) )^(-fractional_d) *
(f + (exp(-1i*omega)*0.34) /(1-exp(-1i*omega)*0.34*sqrt(pi)/2*pracma::erfi(1)) *
rank_one_tensor( function(x){exp((x^2)/2)}, function(x){exp((x^2)/2)}, f ))
}
## simulation setting
t_max <- 1000
n_grid <- 101
# set up random seed
seed <- NULL # no rng seed is inicialized
#seed <- 123
##################################################################################################################
## simulate
## simulate in the spectral domain
start_time <- Sys.time()
fts_x <- filtration_simulate(sigma, theta, t_max, n_grid, seed_number=seed)
end_time <- Sys.time()
print(end_time - start_time)
# plot one trajectory
par(mfrow=c(1,3))
plot(fts_x[,1], type='l')
## compare the empirical and theoretical autocovariance operator
lag <- 1 # user input here
# calculate the empirical covariance operator
covlagh_empiric <- cov( t(fts_x[,(1+lag):t_max]), t(fts_x[,1:(t_max-lag)]))
persp(covlagh_empiric, ticktype = "detailed") # surface plot. Warning: the visualisation takes long if "n_grid" is high
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_paper_filtration.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_paper_filtration.R', echo=TRUE)
theta
theta(1, grid)
theta(1, grid_matrix)
grid <- seq( 0, 1, length.out = n_grid ) # grid of [0,1] interval
grid_matrix <- kronecker(grid,matrix(1,1,n_grid))
theta(1, grid_matrix)
m=theta(1, grid)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_paper_filtration.R', echo=TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
source('~/GitHub/specsimfts/demo/demo_FARFIMA_paper_filtration.R', echo=TRUE)
